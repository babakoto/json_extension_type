/// Basic example showing simple typedef record conversion
library;

// Define an enum
enum UserRole {
  admin,
  user,
  guest,
}

// Define a typedef record
typedef User = ({
  String id,
  String name,
  String email,
  int age,
  UserRole role,
  List<String> permissions,
});

// ==========================================
// Generated by JSON Extension Type (JET)
// Do not modify manually
// Run "jet generate" to update
// ==========================================
extension type UserJson(dynamic data) {
  User toModel() {
    return (
      id: data['id'] as String? ?? '',
      name: data['name'] as String? ?? '',
      email: data['email'] as String? ?? '',
      age: data['age'] as int? ?? 0,
      role: UserRole.values.byName(data['role'] as String? ?? 'admin'),
      permissions: (data['permissions'] as List?)?.cast<String>() ?? [],
    );
  }

  List<User> toList() {
    final data = this.data as List;
    return data.map((e) => UserJson(e).toModel()).toList();
  }
}

void main() {
  print('=== Basic Example ===\n');

  // Example 1: Single user
  final json = {
    'id': '123',
    'name': 'John Doe',
    'email': 'john@example.com',
    'age': 30,
    'role': 'admin',
    'permissions': ['read', 'write', 'delete'],
  };

  final user = UserJson(json).toModel();
  print('User: ${user.name}');
  print('Email: ${user.email}');
  print('Age: ${user.age}');
  print('Role: ${user.role}');
  print('Permissions: ${user.permissions.join(', ')}');
  print('Can delete: ${user.permissions.contains('delete')}\n');

  // Example 2: List of users
  final jsonList = [
    {
      'id': '1',
      'name': 'Alice',
      'email': 'alice@example.com',
      'age': 25,
      'role': 'user',
      'permissions': ['read'],
    },
    {
      'id': '2',
      'name': 'Bob',
      'email': 'bob@example.com',
      'age': 35,
      'role': 'admin',
      'permissions': ['read', 'write', 'delete'],
    },
    {
      'id': '3',
      'name': 'Charlie',
      'email': 'charlie@example.com',
      'age': 28,
      'role': 'guest',
      'permissions': [],
    },
  ];

  final users = UserJson(jsonList).toList();
  print('Total users: ${users.length}');
  for (final user in users) {
    print('- ${user.name} (${user.role}): ${user.permissions.length} permissions');
  }
}

