/// Example showing custom annotations for JSON key mapping and default values
library;

enum OrderStatus {
  pending,
  processing,
  shipped,
  delivered,
  cancelled,
}

enum PaymentMethod {
  creditCard,
  paypal,
  bankTransfer,
  cash,
}

// Using custom annotations
typedef Order = ({
  //#key:order_id
  String id,
  //#key:customer_name
  String customerName,
  //#key:customer_email
  String customerEmail,
  //#key:total_amount #default:0.0
  double total,
  //#key:order_status
  OrderStatus status,
  //#key:payment_method
  PaymentMethod paymentMethod,
  //#key:items_count #default:0
  int itemsCount,
  //#key:is_gift #default:false
  bool isGift,
  //#key:created_at
  String createdAt,
});

// ==========================================
// Generated by JSON Extension Type (JET)
// Do not modify manually
// Run "jet generate" to update
// ==========================================
extension type OrderJson(dynamic data) {
  Order toModel() {
    return (
      id: data['order_id'] as String? ?? '',
      customerName: data['customer_name'] as String? ?? '',
      customerEmail: data['customer_email'] as String? ?? '',
      total: data['total_amount'] as double? ?? 0.0,
      status: OrderStatus.values.byName(data['order_status'] as String? ?? 'pending'),
      paymentMethod: PaymentMethod.values.byName(data['payment_method'] as String? ?? 'creditCard'),
      itemsCount: data['items_count'] as int? ?? 0,
      isGift: data['is_gift'] as bool? ?? false,
      createdAt: data['created_at'] as String? ?? '',
    );
  }

  List<Order> toList() {
    final data = this.data as List;
    return data.map((e) => OrderJson(e).toModel()).toList();
  }
}

void main() {
  print('=== Custom Annotations Example ===\n');

  // Example with snake_case JSON (typical from APIs)
  final json1 = {
    'order_id': 'ORD-2024-001',
    'customer_name': 'Jane Smith',
    'customer_email': 'jane.smith@example.com',
    'total_amount': 299.99,
    'order_status': 'processing',
    'payment_method': 'creditCard',
    'items_count': 3,
    'is_gift': true,
    'created_at': '2024-10-25T10:30:00Z',
  };

  final order1 = OrderJson(json1).toModel();
  print('Order #1:');
  print('ID: ${order1.id}');
  print('Customer: ${order1.customerName}');
  print('Email: ${order1.customerEmail}');
  print('Total: \$${order1.total}');
  print('Status: ${order1.status}');
  print('Payment: ${order1.paymentMethod}');
  print('Items: ${order1.itemsCount}');
  print('Gift: ${order1.isGift ? 'Yes üéÅ' : 'No'}');
  print('Created: ${order1.createdAt}\n');

  // Example with missing optional fields (using defaults)
  final json2 = {
    'order_id': 'ORD-2024-002',
    'customer_name': 'John Doe',
    'customer_email': 'john.doe@example.com',
    // total_amount missing - will use default 0.0
    'order_status': 'pending',
    'payment_method': 'paypal',
    // items_count missing - will use default 0
    // is_gift missing - will use default false
    'created_at': '2024-10-25T11:00:00Z',
  };

  final order2 = OrderJson(json2).toModel();
  print('Order #2 (with defaults):');
  print('ID: ${order2.id}');
  print('Customer: ${order2.customerName}');
  print('Total: \$${order2.total} (default)');
  print('Status: ${order2.status}');
  print('Items: ${order2.itemsCount} (default)');
  print('Gift: ${order2.isGift ? 'Yes' : 'No (default)'}\n');

  // Example with list of orders
  final ordersList = [json1, json2, {
    'order_id': 'ORD-2024-003',
    'customer_name': 'Bob Wilson',
    'customer_email': 'bob@example.com',
    'total_amount': 599.99,
    'order_status': 'delivered',
    'payment_method': 'bankTransfer',
    'items_count': 5,
    'is_gift': false,
    'created_at': '2024-10-24T09:15:00Z',
  }];

  final orders = OrderJson(ordersList).toList();
  print('All Orders Summary:');
  print('Total orders: ${orders.length}');
  
  final totalRevenue = orders.fold<double>(0.0, (sum, order) => sum + order.total);
  print('Total revenue: \$${totalRevenue.toStringAsFixed(2)}');
  
  final totalItems = orders.fold<int>(0, (sum, order) => sum + order.itemsCount);
  print('Total items: $totalItems');
  
  final giftOrders = orders.where((order) => order.isGift).length;
  print('Gift orders: $giftOrders');
}

