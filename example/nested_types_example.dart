/// Example showing nested types and complex structures
library;

// Define nested typedef records
typedef Product = ({
  String id,
  String name,
  double price,
  Category category,
  List<Review> reviews,
  Inventory? inventory,
});

typedef Category = ({
  String id,
  String name,
  String description,
});

typedef Review = ({
  String author,
  int rating,
  String comment,
  String? verifiedPurchase,
});

typedef Inventory = ({
  int stock,
  String warehouse,
  bool available,
});

// ==========================================
// Generated by JSON Extension Type (JET)
// Do not modify manually
// Run "jet generate" to update
// ==========================================
extension type ProductJson(dynamic data) {
  Product toModel() {
    return (
      id: data['id'] as String? ?? '',
      name: data['name'] as String? ?? '',
      price: data['price'] as double? ?? 0.0,
      category: CategoryJson(data['category'] as Map<String, Object?>?).toModel(),
      reviews: (data['reviews'] as List?)?.map((e) => ReviewJson(e).toModel()).toList() ?? [],
      inventory: data['inventory'] != null ? InventoryJson(data['inventory'] as Map<String, Object?>?).toModel() : null,
    );
  }

  List<Product> toList() {
    final data = this.data as List;
    return data.map((e) => ProductJson(e).toModel()).toList();
  }
}

extension type CategoryJson(dynamic data) {
  Category toModel() {
    return (
      id: data['id'] as String? ?? '',
      name: data['name'] as String? ?? '',
      description: data['description'] as String? ?? '',
    );
  }

  List<Category> toList() {
    final data = this.data as List;
    return data.map((e) => CategoryJson(e).toModel()).toList();
  }
}

extension type ReviewJson(dynamic data) {
  Review toModel() {
    return (
      author: data['author'] as String? ?? '',
      rating: data['rating'] as int? ?? 0,
      comment: data['comment'] as String? ?? '',
      verifiedPurchase: data['verifiedPurchase'] as String?,
    );
  }

  List<Review> toList() {
    final data = this.data as List;
    return data.map((e) => ReviewJson(e).toModel()).toList();
  }
}

extension type InventoryJson(dynamic data) {
  Inventory toModel() {
    return (
      stock: data['stock'] as int? ?? 0,
      warehouse: data['warehouse'] as String? ?? '',
      available: data['available'] as bool? ?? false,
    );
  }

  List<Inventory> toList() {
    final data = this.data as List;
    return data.map((e) => InventoryJson(e).toModel()).toList();
  }
}

void main() {
  print('=== Nested Types Example ===\n');

  final json = {
    'id': 'p1',
    'name': 'MacBook Pro',
    'price': 1999.99,
    'category': {
      'id': 'c1',
      'name': 'Laptops',
      'description': 'High-performance laptops',
    },
    'reviews': [
      {
        'author': 'Alice',
        'rating': 5,
        'comment': 'Great laptop! Very fast and reliable.',
        'verifiedPurchase': 'Yes',
      },
      {
        'author': 'Bob',
        'rating': 4,
        'comment': 'Good but a bit expensive.',
      },
      {
        'author': 'Charlie',
        'rating': 5,
        'comment': 'Best laptop I ever had!',
        'verifiedPurchase': 'Yes',
      },
    ],
    'inventory': {
      'stock': 15,
      'warehouse': 'NYC-01',
      'available': true,
    },
  };

  final product = ProductJson(json).toModel();

  print('Product: ${product.name}');
  print('Price: \$${product.price}');
  print('Category: ${product.category.name} (${product.category.description})');
  print('\nReviews (${product.reviews.length}):');
  
  var totalRating = 0;
  for (final review in product.reviews) {
    final verified = review.verifiedPurchase != null ? ' ✓ Verified' : '';
    print('- ${review.author}: ${'★' * review.rating}$verified');
    print('  "${review.comment}"');
    totalRating += review.rating;
  }
  
  final avgRating = totalRating / product.reviews.length;
  print('\nAverage Rating: ${avgRating.toStringAsFixed(1)}/5.0');

  if (product.inventory != null) {
    final inv = product.inventory!;
    print('\nInventory:');
    print('- Stock: ${inv.stock} units');
    print('- Warehouse: ${inv.warehouse}');
    print('- Available: ${inv.available ? 'Yes' : 'No'}');
  }
}

